LOGFILE="/var/log/setup.log"
touch $LOGFILE

log() {
  echo "$(date +'%Y-%m-%d %H:%M:%S') - $1" | tee -a $LOGFILE
}

exec_command() {
  log "Executing: $1"
  eval $1 | tee -a $LOGFILE
}

log "Updating package list and installing prerequisites"
exec_command "sudo apt-get update -y"
exec_command "sudo apt-get install ca-certificates curl -y"
exec_command "sudo install -m 0755 -d /etc/apt/keyrings"
exec_command "sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc"
exec_command "sudo chmod a+r /etc/apt/keyrings/docker.asc"

log "Adding Docker repository"
exec_command "echo 'deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable' | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null"

log "Installing Docker"
exec_command "sudo apt-get update -y"
exec_command "sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y"

log "Adding user to Docker group"
exec_command "sudo usermod -aG docker ubuntu"
exec_command "sudo usermod -aG docker root"
exec_command "newgrp docker"

log "Installing Kubectl"
exec_command "curl -LO https://dl.k8s.io/release/v1.30.0/bin/linux/amd64/kubectl"
exec_command "sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl"

log "Installing Helm"
exec_command "wget https://get.helm.sh/helm-v3.15.2-linux-amd64.tar.gz"
exec_command "tar -zxvf helm-v3.15.2-linux-amd64.tar.gz"
exec_command "mv linux-amd64/helm /usr/local/bin/helm"

log "Installing Kind"
exec_command "[ \$(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64"
exec_command "chmod +x ./kind"
exec_command "sudo mv ./kind /usr/local/bin/kind"

log "Creating Kind cluster configuration"
cat <<EOF > /tmp/kind-config.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
  kubeadmConfigPatches:
  - |
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        node-labels: "ingress-ready=true"
  extraPortMappings:
  - containerPort: 80
    hostPort: 80
    listenAddress: "0.0.0.0"
  - containerPort: 443
    hostPort: 443
    listenAddress: "0.0.0.0"
- role: worker
- role: worker
- role: worker
EOF

log "Creating Kind cluster"
exec_command "kind create cluster --config /tmp/kind-config.yaml"

log "Setting up kubeconfig for root and ubuntu users"
exec_command "mkdir -p ~/.kube"
exec_command "touch ~/.kube/config"
exec_command "sudo kind get kubeconfig > ~/.kube/config"
exec_command "sudo chown \$(id -u):\$(id -g) \$HOME/.kube/config"

exec_command "mkdir -p /home/ubuntu/.kube"
exec_command "touch /home/ubuntu/.kube/config"
exec_command "sudo chown ubuntu:ubuntu /home/ubuntu/.kube/config"
exec_command "sudo kind get kubeconfig > /home/ubuntu/.kube/config"

cat <<EOF > /tmp/backend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 2
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - kind-worker
          - kind-worker2
          - kind-worker3
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: gh27/sss-backend:latest
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
  type: ClusterIP